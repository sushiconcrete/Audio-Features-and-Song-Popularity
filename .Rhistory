df <- na.omit(df)
df <- df[!duplicated(df), ]
hist(df$tempo)
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:15) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)  # Replace K with chosen number
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:15) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)  # Replace K with chosen number
# Compute and plot WSS for k = 1 to k = 15
wss <- sapply(1:15, function(k){kmeans(scaled_features, k, nstart = 25, iter.max = 50)$tot.withinss})
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:15) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)  # Replace K with chosen number
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)  # Replace K with chosen number
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
kmeans_result <- kmeans(scaled_features, centers=3)  # Replace K with chosen number
# View cluster centers
print(kmeans_result$centers)
# View size of clusters
print(table(kmeans_result$cluster))
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
K <- 3
# Perform K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)
# Add the cluster assignment to your original dataframe
df$cluster <- kmeans_result$cluster
# Compute the average popularity for each cluster
average_popularity <- aggregate(df$popularity, by=list(cluster=df$cluster), FUN=mean)
# Print the average popularity for each cluster
print(average_popularity)
# Select features
features <- df[, c("danceability", "energy", "loudness", "valence")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_result
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_result
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
pca_coordinates
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
library(ggplot2)
ggplot(plot_df, aes(x = PC1, y = PC2, color = cluster)) +
geom_point() +
theme_minimal() +
labs(color = "Cluster", title = "Song Clusters Based on Audio Features",
x = "Principal Component 1", y = "Principal Component 2")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:3]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
library(ggplot2)
ggplot(plot_df, aes(x = PC1, y = PC2, color = cluster)) +
geom_point() +
theme_minimal() +
labs(color = "Cluster", title = "Song Clusters Based on Audio Features",
x = "Principal Component 1", y = "Principal Component 2")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
library(ggplot2)
ggplot(plot_df, aes(x = PC1, y = PC2, color = cluster)) +
geom_point() +
theme_minimal() +
labs(color = "Cluster", title = "Song Clusters Based on Audio Features",
x = "Principal Component 1", y = "Principal Component 2")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
library(ggplot2)
library(corrplot)
library(dbplyr)
df <- read.csv("spotify_dataset.csv")
df <- na.omit(df)
df <- df[!duplicated(df), ]
dim(df)
colnames(df)
head(df)
correlations <- cor(df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections", "popularity")])
# Print correlations with popularity
cor_df <- sort(correlations["popularity", ]) %>% as.data.frame()
colnames(cor_df) <- c("correlation")
cor_df
corrplot(correlations, method = "circle", "upper")
cor.test(df$danceability, df$popularity, method = "pearson")
cor.test(df$loudness, df$popularity, method = "pearson")
cor.test(df$valence, df$popularity, method = "pearson")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
# Assuming you already have the scaled_features data from the previous steps
# Choose the number of clusters. For this example, let's assume it's 3.
K <- 3
# Perform K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)
# Add the cluster assignment to your original dataframe
df$cluster <- kmeans_result$cluster
# Compute the average popularity for each cluster
average_popularity <- aggregate(df$popularity, by=list(cluster=df$cluster), FUN=mean)
# Print the average popularity for each cluster
print(average_popularity)
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
# Assuming you already have the scaled_features data from the previous steps
# Choose the number of clusters. For this example, let's assume it's 3.
K <- 5
# Perform K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)
# Add the cluster assignment to your original dataframe
df$cluster <- kmeans_result$cluster
# Compute the average popularity for each cluster
average_popularity <- aggregate(df$popularity, by=list(cluster=df$cluster), FUN=mean)
# Print the average popularity for each cluster
print(average_popularity)
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
# Assuming you already have the scaled_features data from the previous steps
# Choose the number of clusters. For this example, let's assume it's 3.
K <- 5
# Perform K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=K)
# Add the cluster assignment to your original dataframe
df$cluster <- kmeans_result$cluster
# Compute the average popularity for each cluster
average_popularity <- aggregate(df$popularity, by=list(cluster=df$cluster), FUN=mean)
# Print the average popularity for each cluster
print(average_popularity)
# Perform PCA on the scaled features
pca_result <- prcomp(scaled_features)
# Get the coordinates of the songs in the space of the first two principal components
pca_coordinates <- pca_result$x[, 1:2]
# Create a data frame for plotting
plot_df <- data.frame(pca_coordinates, cluster = factor(df$cluster))
# Plot the clusters
library(ggplot2)
ggplot(plot_df, aes(x = PC1, y = PC2, color = cluster)) +
geom_point() +
theme_minimal() +
labs(color = "Cluster", title = "Song Clusters Based on Audio Features",
x = "Principal Component 1", y = "Principal Component 2")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:15) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot WSS for k = 1 to k = 15
wss <- sapply(1:15, function(k){kmeans(scaled_features, k, nstart = 25, iter.max = 50)$tot.withinss})
# Plot the elbow plot
plot(1:15, wss, type='b', main="Elbow Plot", xlab="Number of clusters (K)", ylab="Total within-clusters sum of squares")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 2:15) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=9)  # Replace K with chosen number
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=9)  # Replace K with chosen number
# View cluster centers
print(kmeans_result$centers)
# View size of clusters
print(table(kmeans_result$cluster))
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
kmeans_result <- kmeans(scaled_features, centers=9)  # Replace K with chosen number
plot(kmeans_result)
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(df, 9, nstart = 25)
library(ggplot2)
library(corrplot)
library(dbplyr)
library(factoextra)
install.packages("factoextra")
library(ggplot2)
library(corrplot)
library(dbplyr)
library(factoextra)
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(df, 9, nstart = 25)
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(df, 9, 25)
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(scaled_features, 9, nstart = 25)
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(scaled_features, 9, nstart = 20)
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(scaled_features, 9, nstart = 20, iter.max=30)
km.res
features$cluster <- factor(km.res$cluster)
ggplot(features, aes(number_of_reviews, price, color = cluster_id)) +
geom_point(alpha = 0.25) +
xlab("Number of reviews") +
ylab("Price")
features$cluster <- factor(km.res$cluster)
ggplot(features, aes(x, y, color = cluster_id)) +
geom_point(alpha = 0.25) +
xlab("Number of reviews") +
ylab("Price")
pca_result <- prcomp(scaled_features)
# Get the coordinates of the songs in the space of the first two principal components
pca_coordinates <- pca_result$x[, 1:2]
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(scaled_features, 9, nstart = 20, iter.max=30)
km.res$cluster
autoplot(km.res, features, frame = TRUE)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
autoplot(km.res, pca_coordinates, frame = TRUE)
?autoplot
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
autoplot(km.res, scaled_features, frame = TRUE)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
dim(pca_coordinates)
autoplot(km.res, scaled_features, frame = TRUE)
pca_result <- prcomp(scaled_features)
pca_coordinates <- pca_result$x[, 1:2]
autoplot(km.res, pca_coordinates, frame = TRUE)
# Perform PCA on the scaled features
pca_result <- prcomp(scaled_features)
# Get the coordinates of the songs in the space of the first two principal components
pca_coordinates <- pca_result$x[, 1:2]
# Add the cluster assignment to your PCA coordinates
pca_coordinates$cluster <- factor(km.res$cluster)
# Create a data frame for plotting
plot_df <- as.data.frame(pca_coordinates)
library(ggplot2)
library(corrplot)
library(dbplyr)
library(factoextra)
df <- read.csv("spotify_dataset.csv")
df <- na.omit(df)
df <- df[!duplicated(df), ]
dim(df)
colnames(df)
head(df)
correlations <- cor(df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections", "popularity")])
# Print correlations with popularity
cor_df <- sort(correlations["popularity", ]) %>% as.data.frame()
colnames(cor_df) <- c("correlation")
cor_df
corrplot(correlations, method = "circle", "upper")
cor.test(df$danceability, df$popularity, method = "pearson")
cor.test(df$loudness, df$popularity, method = "pearson")
cor.test(df$valence, df$popularity, method = "pearson")
# Select features
features <- df[, c("danceability", "energy", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo",
"duration_ms", "time_signature", "chorus_hit", "sections")]
scaled_features <- scale(features)
# Compute and plot wss for k = 1 to k = 15
wss <- (nrow(scaled_features)-1)*sum(apply(scaled_features,2,var))
for (k in 1:20) {
wss[k] <- sum(kmeans(scaled_features, centers=k)$withinss)
}
plot(1:20, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# K-means clustering
set.seed(123)  # For reproducibility
km.res <- kmeans(scaled_features, 9, nstart = 20, iter.max=30)
# Perform PCA on the scaled features
pca_result <- prcomp(scaled_features)
# Get the coordinates of the songs in the space of the first two principal components
pca_coordinates <- pca_result$x[, 1:2]
# Add the cluster assignment to your PCA coordinates
pca_coordinates$cluster <- factor(km.res$cluster)
# Create a data frame for plotting
plot_df <- as.data.frame(pca_coordinates)
# Perform PCA on the scaled features
pca_result <- prcomp(scaled_features)
# Get the coordinates of the songs in the space of the first two principal components
pca_coordinates <- pca_result$x[, 1:2]
# Add the cluster assignment to your PCA coordinates
pca_coordinates$cluster <- factor(km.res$cluster)
# Create a data frame for plotting
plot_df <- as.data.frame(pca_coordinates)
